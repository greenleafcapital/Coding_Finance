<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Coding Finance</title>
    <link>/post/</link>
    <description>Recent content in Posts on Coding Finance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Factor Based Analysis in Python</title>
      <link>/post/2019-07-01-analyze-ff-factor-python/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-07-01-analyze-ff-factor-python/</guid>
      <description>In the last post we performed several steps in downloading and analyzing the fund performance data. We used the Fama French’s 3 factor model to analyze Fidelity Contrafund Fund (FCNTX). In this post we will repeat the same steps without all the explanation. We will try to make things clear using the comments in our code. So lets begin by loading all the modules we will need to run our analysis.</description>
    </item>
    
    <item>
      <title>Factor Based Analysis</title>
      <link>/post/2019-07-01-analyze-ff-factor-r/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019-07-01-analyze-ff-factor-r/</guid>
      <description>In the previous two posts we learned how to download and clean the Fama French 3 factors data. In this post we will use those factors to analyze mutual funds performance.
But before we proceed let us understand what Fama French factor model really is.
The traditional asset pricing model (CAPM), used only one factor (Market returns) to explain the returns of a portfolio or a stock. Fama &amp;amp; French concluded that CAPM model was not sufficient to explain all the sources of returns for a portfolio.</description>
    </item>
    
    <item>
      <title>How to download and clean Fama French 3 factor model data in Python</title>
      <link>/post/2018-06-15-clean-ff-data-in-py/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-15-clean-ff-data-in-py/</guid>
      <description>In this post we will download and clean the Fama/French 3 factors model data. First we will download the data like we did in the previous post.
To keep it brief we will execute the entire code at once.
import urllib.requestimport zipfileff_url = &amp;quot;https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_CSV.zip&amp;quot;# Download the file and save it# We will name it fama_french.zip fileurllib.request.urlretrieve(ff_url,&amp;#39;fama_french.zip&amp;#39;)zip_file = zipfile.ZipFile(&amp;#39;fama_french.zip&amp;#39;, &amp;#39;r&amp;#39;)# Next we extact the file data# We will call it ff_factors.</description>
    </item>
    
    <item>
      <title>How to download and clean Fama French 3 factor model data in R</title>
      <link>/post/2018-06-15-clean-ff-data-in-r/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-15-clean-ff-data-in-r/</guid>
      <description>In the last post we learned to download the FF data. In this post we will learn to clean the data so we can use it for our analysis.
First lets load the libraries and the data.
library(tidyquant)library(timetk)ff_url &amp;lt;- &amp;quot;https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/ftp/F-F_Research_Data_Factors_CSV.zip&amp;quot;temp_file &amp;lt;- tempfile()download.file(ff_url, temp_file)ff_data_raw &amp;lt;- read_csv(unzip(temp_file), skip = 3)## Warning: Missing column names filled in: &amp;#39;X1&amp;#39; [1]## Parsed with column specification:## cols(## X1 = col_integer(),## `Mkt-RF` = col_double(),## SMB = col_double(),## HML = col_double(),## RF = col_double()## )## Warning in rbind(names(probs), probs_f): number of columns of result is not## a multiple of vector length (arg 1)## Warning: 8 parsing failures.</description>
    </item>
    
    <item>
      <title>How to download Fama French 3 factor Model data in Python</title>
      <link>/post/2018-06-10-download-ff-data-in-py/</link>
      <pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-06-10-download-ff-data-in-py/</guid>
      <description>We will perform the same step as we did in the last post. This time we will do it in Python. We will need a few libraries to download our data. We will use the urllib.request for downloading the file and zipfile to extract the content of the zip file.
import urllib.requestimport zipfileOnce we have imported the modules, we are ready to download the files from the website.</description>
    </item>
    
    <item>
      <title>How to download Fama French 3 factor Model data in R</title>
      <link>/post/2018-05-31-download-ff-data-in-r/</link>
      <pubDate>Mon, 10 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-05-31-download-ff-data-in-r/</guid>
      <description>In this post we will show you how to use R to download Fama French 3 factor model data from their website. You can find the data on their website at “https://mba.tuck.dartmouth.edu/pages/faculty/ken.french/data_library.html” We will select and download the Fama/French 3 factors monthly data.
Lets begin!
Since we will just be learning how to download the data and not perform any analysis, we won’t need to load any libraries.
First we will need to copy the link of the data that we are trying to download.</description>
    </item>
    
    <item>
      <title>Portfolio Optimization in Python</title>
      <link>/post/2018-05-31-portfolio-opt-in-python/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-05-31-portfolio-opt-in-python/</guid>
      <description>In this post we will demonstrate how to use python to calculate the optimal portfolio and visualize the efficient frontier.
In this post we will only show the code with minor explanations.
Lets begin with loading the modules.
import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport pandas_datareader as webNext we will get the stock tickers and the price data.
tick = [&amp;#39;AMZN&amp;#39;, &amp;#39;AAPL&amp;#39;, &amp;#39;NFLX&amp;#39;, &amp;#39;XOM&amp;#39;, &amp;#39;T&amp;#39;]price_data = web.</description>
    </item>
    
    <item>
      <title>Portfolio Optimization in R</title>
      <link>/post/2018-05-31-portfolio-opt-in-r/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-05-31-portfolio-opt-in-r/</guid>
      <description>Portfolio optimization is an important topic in Finance. Modern portfolio theory (MPT) states that investors are risk averse and given a level of risk, they will choose the portfolios that offer the most return. To do that we need to optimize the portfolios.
To perform the optimization we will need
To download the price data of the assetsCalculate the mean returns for the time periodAssign random weights to the assets and then use those to build an efficient frontierSo lets begin</description>
    </item>
    
    <item>
      <title>Creating Candlestick charts in Python</title>
      <link>/post/2018-05-15-candlestick-chart-in-python/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-05-15-candlestick-chart-in-python/</guid>
      <description>In this post we will show you how to generate a candlestick chart in Python using the Bokeh module. To install the Bokeh module you will need to in type pip install bokeh in your command line on a PC or the Mac terminal. Once you have installed the package you can use the below code to generate a candlestick chart using Bokeh.
First import the packages
#Import the packagesimport pandas as pdimport pandas_datareader as webfrom bokeh.</description>
    </item>
    
    <item>
      <title>Creating Candlestick charts in R</title>
      <link>/post/2018-05-15-candlestick-chart-in-r/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-05-15-candlestick-chart-in-r/</guid>
      <description>library(tidyquant)library(plotly)Plotting S&amp;amp;P 500 etf (SPY) price data since March 1, 2019. We will use the below code to plot the chart using plotly.
spy_price &amp;lt;- tq_get(&amp;#39;SPY&amp;#39;,from = &amp;#39;2018-03-01&amp;#39;,to = &amp;quot;2018-05-15&amp;quot;,get = &amp;#39;stock.prices&amp;#39;)spy_price %&amp;gt;%plot_ly(x = ~date,type = &amp;#39;candlestick&amp;#39;,open = ~open,close = ~close,high = ~high,low = ~low) %&amp;gt;%layout(title = &amp;#39;SPY Price since March 2019&amp;#39;,xaxis = list(rangeslider = list(visible = F))){&#34;</description>
    </item>
    
    <item>
      <title>How to calculate portfolio beta in Python</title>
      <link>/post/2018-04-25-portfolio-beta-py/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-25-portfolio-beta-py/</guid>
      <description>In this post we will calculate the portfolio beta
As usual we will start with loading our libraries.
import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport pandas_datareader as webfrom scipy import statsimport seaborn as snsWe will use the same assets from the last post to build our portfolio.
# Create a list of tickers and weightstickers = [&amp;#39;BND&amp;#39;, &amp;#39;VB&amp;#39;, &amp;#39;VEA&amp;#39;, &amp;#39;VOO&amp;#39;, &amp;#39;VWO&amp;#39;]wts = [0.</description>
    </item>
    
    <item>
      <title>How to calculate portfolio beta in R</title>
      <link>/post/2018-04-25-portfolio-beta/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-25-portfolio-beta/</guid>
      <description>In this post we will calculate the portfolio beta
As usual we will start with loading our libraries.
library(tidyquant)library(timetk)We will use the same assets from the last post to build our portfolio.
# Create the tickers and weights vectortickers = c(&amp;#39;BND&amp;#39;, &amp;#39;VB&amp;#39;, &amp;#39;VEA&amp;#39;, &amp;#39;VOO&amp;#39;, &amp;#39;VWO&amp;#39;)wts = c(0.1,0.2,0.25,0.25,0.2)Next lets download the price data from yahoo finance.
price_data &amp;lt;- tq_get(tickers,from = &amp;#39;2013-01-01&amp;#39;,to = &amp;#39;2018-03-01&amp;#39;,get = &amp;#39;stock.</description>
    </item>
    
    <item>
      <title>How to calculate portfolio statistics in Python</title>
      <link>/post/2018-04-20-portfolio-stats-py/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-20-portfolio-stats-py/</guid>
      <description>In this post we will calculate the following portfolio statistics using Python.
Portfolio average returnsPortfolio standard deviationPortfolio Sharpe ratioAs usual we will start with loading our libraries.
import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport pandas_datareader as webWe will use the same assets from the last post to build our portfolio.
# Create a list of tickers and weightstickers = [&amp;#39;BND&amp;#39;, &amp;#39;VB&amp;#39;, &amp;#39;VEA&amp;#39;, &amp;#39;VOO&amp;#39;, &amp;#39;VWO&amp;#39;]wts = [0.</description>
    </item>
    
    <item>
      <title>How to calculate portfolio statistics in R</title>
      <link>/post/2018-04-20-portfolio-stats/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-20-portfolio-stats/</guid>
      <description>In this post we will calculate the following portfolio statistics using R.
Portfolio average returnsPortfolio standard deviationPortfolio Sharpe ratioAs usual we will start with loading our libraries.
library(tidyquant)library(timetk)We will use the same assets from the last post to build our portfolio.
# Create the tickers and weights vectortickers = c(&amp;#39;BND&amp;#39;, &amp;#39;VB&amp;#39;, &amp;#39;VEA&amp;#39;, &amp;#39;VOO&amp;#39;, &amp;#39;VWO&amp;#39;)wts = c(0.1,0.2,0.25,0.25,0.2)Next lets download the price data from yahoo finance.</description>
    </item>
    
    <item>
      <title>How to calculate Cumulative portfolio returns in Python</title>
      <link>/post/2018-04-10-cumulative-portfolio-returns-py/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-10-cumulative-portfolio-returns-py/</guid>
      <description>Calculating Cumulative portfolio returns in PythonIn the last post we learned how to construct a portfolio in python. We also learned how to calculate the daily portfolio returns. In this post we will learn how to calculate portfolio cumulative returns.
First lets load the library.
import pandas as pdimport numpy as npimport matplotlib.pyplot as pltimport pandas_datareader as webThen lets load the ticker symbols for our assets that we will include in our portfolio.</description>
    </item>
    
    <item>
      <title>How to calculate Cumulative portfolio returns in R</title>
      <link>/post/2018-04-10-cumulative-portfolio-returns/</link>
      <pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-10-cumulative-portfolio-returns/</guid>
      <description>Calculating Cumulative portfolio returns in RIn the last post we learned how to construct a portfolio in R. We also learned how to calculate the daily portfolio returns. In this post we will learn how to calculate portfolio cumulative returns.
First lets load the library.
library(tidyquant)Then lets load the ticker symbols for our assets that we will include in our portfolio.
# Asset tickerstickers = c(&amp;#39;BND&amp;#39;, &amp;#39;VB&amp;#39;, &amp;#39;VEA&amp;#39;, &amp;#39;VOO&amp;#39;, &amp;#39;VWO&amp;#39;)We will also create a vector for our asset weights.</description>
    </item>
    
    <item>
      <title>How to calculate portfolio returns in Python</title>
      <link>/post/2018-04-05-portfolio-returns-py/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-05-portfolio-returns-py/</guid>
      <description>Calculating portfolio returns in PythonIn this post we will learn to calculate the portfolio returns in Python. Since we are not aware of any modules that perform such calculations we will perform this calculation manually.
Calculating portfolio returns using the formulaA portfolio return is the weighted average of individual assets in the portfolio.
Here is what we need
Asset symbols that make up our portfolioPrice data for the assetsweights of assetsCalculating the weighted average of our assets returnsAdding them to get the portfolio returnsLets first load the modules</description>
    </item>
    
    <item>
      <title>How to calculate portfolio returns in R</title>
      <link>/post/2018-04-05-portfolio-returns/</link>
      <pubDate>Thu, 05 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-05-portfolio-returns/</guid>
      <description>Calculating portfolio returns in RIn this post we will learn to calculate portfolio returns using R. Initially we will do this manually and then use the tidyquant package to calculate the portfolio returns for our purpose.
Calculating portfolio returns using the formulaA portfolio return is the weighted average of individual assets in the portfolio.
Here is what we need
Asset symbols that make up our portfolioPrice data for the assetsweights of assetsCalculating the weighted average of our assets returnsAdding them to get the portfolio returnsLets first load the packages</description>
    </item>
    
    <item>
      <title>How to calculate stock returns in Python</title>
      <link>/post/2018-04-03-calc-returns-py/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-03-calc-returns-py/</guid>
      <description>Calculating financial returns in PythonOne of the most important tasks in financial markets is to analyze historical returns on various investments. To perform this analysis we need historical data for the assets. There are many data providers, some are free most are paid. In this chapter we will use the data from Yahoo’s finance website. In python we can do this using the pandas-datareader module.
In this post we will:</description>
    </item>
    
    <item>
      <title>How to calculate stock returns in R</title>
      <link>/post/2018-04-03-calc-returns/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-04-03-calc-returns/</guid>
      <description>Calculating financial returns in ROne of the most important tasks in financial markets is to analyze historical returns on various investments. To perform this analysis we need historical data for the assets. There are many data providers, some are free most are paid. In this chapter we will use the data from Yahoo’s finance website.
In this post we will:
Download pricesCalculate ReturnsCalculate mean and standard deviation of returnsLets load the libraries first.</description>
    </item>
    
    <item>
      <title>How to download stock prices in Python</title>
      <link>/post/2018-03-27-download-price-py/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-27-download-price-py/</guid>
      <description>Getting stock prices from Yahoo FinanceOne of the most important tasks in financial markets is to analyze historical returns on various investments. To perform this analysis we need historical data for the assets. There are many data providers, some are free most are paid. In this chapter we will use the data from Yahoo’s finance website. Since Yahoo was bought by Verizon, there have been several changes with their API.</description>
    </item>
    
    <item>
      <title>How to download stock prices in R</title>
      <link>/post/2018-03-27-download-price/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-27-download-price/</guid>
      <description>Getting stock prices from Yahoo FinanceOne of the most important tasks in financial markets is to analyze historical returns on various investments. To perform this analysis we need historical data for the assets. There are many data providers, some are free most are paid. In this chapter we will use the data from Yahoo’s finance website. Since Yahoo was bought by Verizon, there have been several changes with their API.</description>
    </item>
    
    <item>
      <title>How to calculate retirement savings in Python</title>
      <link>/post/2018-03-27-retirement-py/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-27-retirement-py/</guid>
      <description>Retirement problemIn the previous posts and examples we saw how saving at different age/time period can affect the amount one has in retirement. Now lets go up a notch in complexity. In this example we look at the similar problem but from another angle.
Suppose we have an individual Jack who is currently 55 years old and intends to retire at 60 (5 years to retirement). Jack expects to live only 10 years after his retirement.</description>
    </item>
    
    <item>
      <title>How to calculate retirement savings in R</title>
      <link>/post/2018-03-27-retirement/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-27-retirement/</guid>
      <description>Retirement problemIn the previous posts and examples we saw how saving at different age/time period can affect the amount one has in retirement. Now lets go up a notch in complexity. In this example we look at the similar problem but from another angle.
Suppose we have an individual Jack who is currently 55 years old and intends to retire at 60 (5 years to retirement). Jack expects to live only 10 years after his retirement.</description>
    </item>
    
    <item>
      <title>Calculating future returns in Python</title>
      <link>/post/2018-03-23-future-value-py/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-23-future-value-py/</guid>
      <description>Calculating the potential future value of Bitcoin InvestmentThe year 2017 was a great year for cryptocurrencies and in particular for the crypto leader Bitcoin. Many people called crypotcurrencies the future of money, but so far 2018 has been lousy. The crypto currency advocates argue that the value of will increase in the future. We have seen many claims, from $50000 to $1000000 per bitcoin. We take no sides and the Market will decide the future.</description>
    </item>
    
    <item>
      <title>Calculating future returns in R</title>
      <link>/post/2018-03-23-future-value/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-23-future-value/</guid>
      <description>Calculating the potential future value of Bitcoin InvestmentThe year 2017 was a great year for cryptocurrencies and in particular for the crypto leader Bitcoin. Many people called crypotcurrencies the future of money, but so far 2018 has been lousy. The crypto currency advocates argue that the value of will increase in the future. We have seen many claims, from $50000 to $1000000 per bitcoin. We take no sides and the Market will decide the future.</description>
    </item>
    
    <item>
      <title>Calculating car loan payments in Python</title>
      <link>/post/2018-03-23-car-payment-py/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-23-car-payment-py/</guid>
      <description>Calculating the car loan paymentsLet’s say that you want to purchase a car for $15000. You only have $5000. A bank offers you $10000 at 7% interest which you have to pay back in 5 years. What is your yearly payment for the car?
Here is what we know
Car price $15000Loan amount $10000Interest rates 7% per yearDuration 5 yearsPayments ? - We need to solve for this.</description>
    </item>
    
    <item>
      <title>Calculating car loan payments in R</title>
      <link>/post/2018-03-23-car-payment/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-23-car-payment/</guid>
      <description>Calculating the car loan paymentsLet’s say that you want to purchase a car for $15000. You only have $5000. A bank offers you $10000 at 7% interest which you have to pay back in 5 years. What is your yearly payment for the car?
Here is what we know
Car price $15000Loan amount $10000Interest rates 7% per yearDuration 5 yearsPayments ? - We need to solve for this.</description>
    </item>
    
    <item>
      <title>Calculating potential returns in Python</title>
      <link>/post/2018-03-22-billboard-py/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-22-billboard-py/</guid>
      <description>Investment opportunity in advertising billboard.You are a rich investor, and somebody comes to you with an investment opportunity to invest in an advertising billboard at a busy junction. The offer is as follows :
You are required to pay $70000 todayThe investment is for 5 yearsThe billboard pays an annual rent of $10000Current interest rates are 5%After five years the billboard needs upgrades, but you don’t want to bother with that.</description>
    </item>
    
    <item>
      <title>Calculating potential returns in R</title>
      <link>/post/2018-03-22-billboard/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-22-billboard/</guid>
      <description>Investment opportunity in advertising billboard.You are a rich investor, and somebody comes to you with an investment opportunity to invest in an advertising billboard at a busy junction. The offer is as follows :
You are required to pay $70000 todayThe investment is for 5 yearsThe billboard pays an annual rent of $10000Current interest rates are 5%After five years the billboard needs upgrades, but you don’t want to bother with that and you hope to sell it.</description>
    </item>
    
    <item>
      <title>How to calculate IRR in Python</title>
      <link>/post/2018-03-20-irr-py/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-20-irr-py/</guid>
      <description>Calculating IRR in PythonCalculation of IRR in Python is easy with the numpy module.
Why do we need to calculate the IRR or Internal rate of returns?
Let us suppose a manager has an opportunity to invest in two projects, but can only choose one project. The projects are:
Project 1 requires $800 million in investment today, but it will pay 200,250,300,350,400 million in payments each year for the next 5 years.</description>
    </item>
    
    <item>
      <title>How to calculate IRR in R</title>
      <link>/post/2018-03-20-irr/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-20-irr/</guid>
      <description>Calculating IRR in RCalculation of IRR in R is easy with the package called jrvFinance. You can install this package with the command install.packages(&#34;jrvFinance&#34;).
Why do we need to calculate the IRR or Internal rate of returns?
Let us suppose a manager has an opportunity to invest in two projects, but can only choose one project. The projects are:
Project 1 requires $800 million in investment today, but it will pay 200,250,300,350,400 million in payments each year for the next 5 years.</description>
    </item>
    
    <item>
      <title>Time Value of Money in Python</title>
      <link>/post/2018-03-19-tvm_py/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-19-tvm_py/</guid>
      <description>In this article we will perform the same time value of money calculations using Python. First let us import the necessary modules/libraries.
import pandas as pdimport numpy as npimport matplotlib.pyplot as pltCreating a pandas dataframe.
# Setting interest rate to 5%r = 0.05cf = pd.DataFrame({&amp;#39;Year&amp;#39;:[1,2,3,4,5], &amp;quot;cash_flow&amp;quot;:[100,100,100,100,100]})cf[&amp;quot;pv&amp;quot;] = cf[&amp;#39;cash_flow&amp;#39;] / (1.0 + r)**cf[&amp;#39;Year&amp;#39;]npv = cf[&amp;quot;pv&amp;quot;].sum()print(cf)## Year cash_flow pv## 0 1 100 95.</description>
    </item>
    
    <item>
      <title>Time Value of Money in R</title>
      <link>/post/2018-03-18-tvm/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-18-tvm/</guid>
      <description>In this article we will perform basic financial calculations in R.
Calculating the Net Present Value (NPV)Financial problems such as valuing an asset can be solved by calculating its net present value. The underlying principle in the calculation is that a dollar today is worth more than a dollar a year from now. This principle was well known to our ancestors thousands of year ago.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/candlestick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/candlestick/</guid>
      <description>candlestick.py exampleBokeh.set_log_level(&#34;info&#34;);{&#34;f362fc6b-64a3-4985-bd11-a6eca8c0afdd&#34;:{&#34;roots&#34;:{&#34;references&#34;:[{&#34;attributes&#34;:{&#34;overlay&#34;:{&#34;id&#34;:&#34;1069&#34;,&#34;type&#34;:&#34;BoxAnnotation&#34;}},&#34;id&#34;:&#34;1023&#34;,&#34;type&#34;:&#34;BoxZoomTool&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1056&#34;,&#34;type&#34;:&#34;UnionRenderers&#34;},{&#34;attributes&#34;:{&#34;x0&#34;:{&#34;field&#34;:&#34;x0&#34;},&#34;x1&#34;:{&#34;field&#34;:&#34;x1&#34;},&#34;y0&#34;:{&#34;field&#34;:&#34;y0&#34;},&#34;y1&#34;:{&#34;field&#34;:&#34;y1&#34;}},&#34;id&#34;:&#34;1032&#34;,&#34;type&#34;:&#34;Segment&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1024&#34;,&#34;type&#34;:&#34;ResetTool&#34;},{&#34;attributes&#34;:{&#34;mantissas&#34;:[1,2,5],&#34;max_interval&#34;:500.0,&#34;num_minor_ticks&#34;:0},&#34;id&#34;:&#34;1057&#34;,&#34;type&#34;:&#34;AdaptiveTicker&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1025&#34;,&#34;type&#34;:&#34;SaveTool&#34;},{&#34;attributes&#34;:{&#34;callback&#34;:null,&#34;data&#34;:{&#34;bottom&#34;:{&#34;__ndarray__&#34;:&#34;AAAAQDO7cEAAAACAFA5xQAAAAOBRaHFAAAAAIIVLcUAAAADAzDRxQAAAAAAAMHFAAAAAQDMjcUAAAAAA1+dwQAAAAEDh5nBAAAAAYLh6cEAAAADAzCBwQAAAAKCZSXBAAAAAoEc9cEAAAAAghRdwQAAAACCFO3BAAAAAAABQcEAAAABgZpJwQAAAAIA95nBAAAAAgD3OcEAAAACAwqlwQAAAAMAeqXBAAAAAIK5vcEAAAADA9ahwQAAAAAApiHBAAAAAQDNzcEAAAAAgrg9xQAAAAKCZ8XBA&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[27]},&#34;top&#34;:{&#34;__ndarray__&#34;:&#34;AAAAYI/2cEAAAADAzBRxQAAAAEAzc3FAAAAAoHB9cUAAAADA9VxxQAAAAIAUPnFAAAAAAAAocUAAAACgmRVxQAAAAGBm7nBAAAAAYI++cEAAAABguIJwQAAAAGC4onBAAAAAAABMcEAAAADAzGhwQAAAAGC4dnBAAAAAgOtVcEAAAABgj7ZwQAAAAEAK63BAAAAAYGbacEAAAADA9cxwQAAAAAAptHBAAAAAIK67cEAAAAAAALBwQAAAAAAptHBAAAAAACmMcEAAAACgcBVxQAAAAKBw+XBA&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[27]},&#34;x&#34;:{&#34;__ndarray__&#34;:&#34;AABAvO0ddkIAAAC5iR92QgAAgBt4IXZCAABAgcohdkIAAADnHCJ2QgAAwExvInZCAACAssEidkIAAMDjuCN2QgAAQK9dJHZCAAAAFbAkdkIAAMB6AiV2QgAAwBFMJnZCAACAd54mdkIAAEB0Oih2QgAAQAuEKXZCAACAPHsqdkIAAIDTxCt2QgAAQNBgLXZCAAAANrMtdkIAAMCbBS52QgAAAM38LnZCAADAMk8vdkIAAABkRjB2QgAAQJU9MXZCAADAYOIxdkIAAMAlvzV2QgAAgIsRNnZC&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[27]}},&#34;selected&#34;:{&#34;id&#34;:&#34;1055&#34;,&#34;type&#34;:&#34;Selection&#34;},&#34;selection_policy&#34;:{&#34;id&#34;:&#34;1056&#34;,&#34;type&#34;:&#34;UnionRenderers&#34;}},&#34;id&#34;:&#34;1041&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;},{&#34;attributes&#34;:{&#34;base&#34;:60,&#34;mantissas&#34;:[1,2,5,10,15,20,30],&#34;max_interval&#34;:1800000.0,&#34;min_interval&#34;:1000.0,&#34;num_minor_ticks&#34;:0},&#34;id&#34;:&#34;1058&#34;,&#34;type&#34;:&#34;AdaptiveTicker&#34;},{&#34;attributes&#34;:{&#34;bottom&#34;:{&#34;field&#34;:&#34;bottom&#34;},&#34;fill_color&#34;:{&#34;value&#34;:&#34;#F2583E&#34;},&#34;top&#34;:{&#34;field&#34;:&#34;top&#34;},&#34;width&#34;:{&#34;value&#34;:43200000},&#34;x&#34;:{&#34;field&#34;:&#34;x&#34;}},&#34;id&#34;:&#34;1042&#34;,&#34;type&#34;:&#34;VBar&#34;},{&#34;attributes&#34;:{&#34;base&#34;:24,&#34;mantissas&#34;:[1,2,4,6,8,12],&#34;max_interval&#34;:43200000.0,&#34;min_interval&#34;:3600000.0,&#34;num_minor_ticks&#34;:0},&#34;id&#34;:&#34;1059&#34;,&#34;type&#34;:&#34;AdaptiveTicker&#34;},{&#34;attributes&#34;:{&#34;active_drag&#34;:&#34;auto&#34;,&#34;active_inspect&#34;:&#34;auto&#34;,&#34;active_multi&#34;:null,&#34;active_scroll&#34;:&#34;auto&#34;,&#34;active_tap&#34;:&#34;auto&#34;,&#34;tools&#34;:[{&#34;id&#34;:&#34;1022&#34;,&#34;type&#34;:&#34;PanTool&#34;},{&#34;id&#34;:&#34;1023&#34;,&#34;type&#34;:&#34;BoxZoomTool&#34;},{&#34;id&#34;:&#34;1024&#34;,&#34;type&#34;:&#34;ResetTool&#34;},{&#34;id&#34;:&#34;1025&#34;,&#34;type&#34;:&#34;SaveTool&#34;}]},&#34;id&#34;:&#34;1026&#34;,&#34;type&#34;:&#34;Toolbar&#34;},{&#34;attributes&#34;:{&#34;bottom&#34;:{&#34;field&#34;:&#34;bottom&#34;},&#34;fill_alpha&#34;:{&#34;value&#34;:0.1},&#34;fill_color&#34;:{&#34;value&#34;:&#34;#1f77b4&#34;},&#34;line_alpha&#34;:{&#34;value&#34;:0.1},&#34;line_color&#34;:{&#34;value&#34;:&#34;#1f77b4&#34;},&#34;top&#34;:{&#34;field&#34;:&#34;top&#34;},&#34;width&#34;:{&#34;value&#34;:43200000},&#34;x&#34;:{&#34;field&#34;:&#34;x&#34;}},&#34;id&#34;:&#34;1043&#34;,&#34;type&#34;:&#34;VBar&#34;},{&#34;attributes&#34;:{&#34;days&#34;:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]},&#34;id&#34;:&#34;1060&#34;,&#34;type&#34;:&#34;DaysTicker&#34;},{&#34;attributes&#34;:{&#34;line_alpha&#34;:{&#34;value&#34;:0.1},&#34;line_color&#34;:{&#34;value&#34;:&#34;#1f77b4&#34;},&#34;x0&#34;:{&#34;field&#34;:&#34;x0&#34;},&#34;x1&#34;:{&#34;field&#34;:&#34;x1&#34;},&#34;y0&#34;:{&#34;field&#34;:&#34;y0&#34;},&#34;y1&#34;:{&#34;field&#34;:&#34;y1&#34;}},&#34;id&#34;:&#34;1033&#34;,&#34;type&#34;:&#34;Segment&#34;},{&#34;attributes&#34;:{&#34;data_source&#34;:{&#34;id&#34;:&#34;1041&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;},&#34;glyph&#34;:{&#34;id&#34;:&#34;1042&#34;,&#34;type&#34;:&#34;VBar&#34;},&#34;hover_glyph&#34;:null,&#34;muted_glyph&#34;:null,&#34;nonselection_glyph&#34;:{&#34;id&#34;:&#34;1043&#34;,&#34;type&#34;:&#34;VBar&#34;},&#34;selection_glyph&#34;:null,&#34;view&#34;:{&#34;id&#34;:&#34;1045&#34;,&#34;type&#34;:&#34;CDSView&#34;}},&#34;id&#34;:&#34;1044&#34;,&#34;type&#34;:&#34;GlyphRenderer&#34;},{&#34;attributes&#34;:{&#34;callback&#34;:null},&#34;id&#34;:&#34;1004&#34;,&#34;type&#34;:&#34;DataRange1d&#34;},{&#34;attributes&#34;:{&#34;days&#34;:[1,4,7,10,13,16,19,22,25,28]},&#34;id&#34;:&#34;1061&#34;,&#34;type&#34;:&#34;DaysTicker&#34;},{&#34;attributes&#34;:{&#34;data_source&#34;:{&#34;id&#34;:&#34;1031&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;},&#34;glyph&#34;:{&#34;id&#34;:&#34;1032&#34;,&#34;type&#34;:&#34;Segment&#34;},&#34;hover_glyph&#34;:null,&#34;muted_glyph&#34;:null,&#34;nonselection_glyph&#34;:{&#34;id&#34;:&#34;1033&#34;,&#34;type&#34;:&#34;Segment&#34;},&#34;selection_glyph&#34;:null,&#34;view&#34;:{&#34;id&#34;:&#34;1035&#34;,&#34;type&#34;:&#34;CDSView&#34;}},&#34;id&#34;:&#34;1034&#34;,&#34;type&#34;:&#34;GlyphRenderer&#34;},{&#34;attributes&#34;:{&#34;source&#34;:{&#34;id&#34;:&#34;1041&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;}},&#34;id&#34;:&#34;1045&#34;,&#34;type&#34;:&#34;CDSView&#34;},{&#34;attributes&#34;:{&#34;days&#34;:[1,8,15,22]},&#34;id&#34;:&#34;1062&#34;,&#34;type&#34;:&#34;DaysTicker&#34;},{&#34;attributes&#34;:{&#34;callback&#34;:null,&#34;data&#34;:{&#34;x0&#34;:{&#34;__ndarray__&#34;:&#34;AABAvO0ddkIAAAAiQB52QgAAQFM3H3ZCAAAAuYkfdkIAAMAe3B92QgAAgIQuIHZCAABA6oAgdkIAAIAbeCF2QgAAQIHKIXZCAAAA5xwidkIAAMBMbyJ2QgAAgLLBInZCAADA47gjdkIAAIBJCyR2QgAAQK9dJHZCAAAAFbAkdkIAAMB6AiV2QgAAAKz5JXZCAADAEUwmdkIAAIB3niZ2QgAAQN3wJnZCAABAdDoodkIAAADajCh2QgAAwD/fKHZCAACApTEpdkIAAEALhCl2QgAAgDx7KnZCAABAos0qdkIAAAAIICt2QgAAwG1yK3ZCAACA08QrdkIAAMAEvCx2QgAAgGoOLXZCAABA0GAtdkIAAAA2sy12QgAAwJsFLnZCAAAAzfwudkIAAMAyTy92QgAAgJihL3ZCAABA/vMvdkIAAABkRjB2QgAAQJU9MXZCAAAA+48xdkIAAMBg4jF2QgAAgMY0MnZCAABALIcydkIAAIBdfjN2QgAAQMPQM3ZCAAAAKSM0dkIAAMCOdTR2QgAAgPTHNHZCAADAJb81dkIAAICLETZ2QgAAQPFjNnZC&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[54]},&#34;x1&#34;:{&#34;__ndarray__&#34;:&#34;AABAvO0ddkIAAAAiQB52QgAAQFM3H3ZCAAAAuYkfdkIAAMAe3B92QgAAgIQuIHZCAABA6oAgdkIAAIAbeCF2QgAAQIHKIXZCAAAA5xwidkIAAMBMbyJ2QgAAgLLBInZCAADA47gjdkIAAIBJCyR2QgAAQK9dJHZCAAAAFbAkdkIAAMB6AiV2QgAAAKz5JXZCAADAEUwmdkIAAIB3niZ2QgAAQN3wJnZCAABAdDoodkIAAADajCh2QgAAwD/fKHZCAACApTEpdkIAAEALhCl2QgAAgDx7KnZCAABAos0qdkIAAAAIICt2QgAAwG1yK3ZCAACA08QrdkIAAMAEvCx2QgAAgGoOLXZCAABA0GAtdkIAAAA2sy12QgAAwJsFLnZCAAAAzfwudkIAAMAyTy92QgAAgJihL3ZCAABA/vMvdkIAAABkRjB2QgAAQJU9MXZCAAAA+48xdkIAAMBg4jF2QgAAgMY0MnZCAABALIcydkIAAIBdfjN2QgAAQMPQM3ZCAAAAKSM0dkIAAMCOdTR2QgAAgPTHNHZCAADAJb81dkIAAICLETZ2QgAAQPFjNnZC&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[54]},&#34;y0&#34;:{&#34;__ndarray__&#34;:&#34;AAAAYLgScUAAAAAghdtwQAAAAIA9DnFAAAAAgD0WcUAAAABA4RJxQAAAAADXI3FAAAAAgOttcUAAAABgj35xQAAAAGCPhnFAAAAA4FFgcUAAAACAwklxQAAAAIA9NnFAAAAAYGYmcUAAAABguPpwQAAAAOBRFHFAAAAAgOvNcEAAAADgo4hwQAAAAEDhlnBAAAAA4FGscEAAAACAPWpwQAAAAAAplHBAAAAAgBRycEAAAADA9VRwQAAAAIDChXBAAAAAgD2qcEAAAACAwpFwQAAAAKBwjXBAAAAA4KOgcEAAAACAPZpwQAAAAAAAsHBAAAAA4KO4cEAAAABAM8NwQAAAAIDr7XBAAAAAwMz0cEAAAACAFN5wQAAAAMD10HBAAAAAgD2+cEAAAAAgrr9wQAAAAIAUgnBAAAAAAAC0cEAAAACgcLVwQAAAAIA9vnBAAAAAoJmRcEAAAABA4ZpwQAAAAIDCdXBAAAAA4KOscEAAAADgUcBwQAAAAKBHtXBAAAAAgOvdcEAAAACAPQZxQAAAAGBmEnFAAAAAoEchcUAAAACAwvlwQAAAAAApDHFA&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[54]},&#34;y1&#34;:{&#34;__ndarray__&#34;:&#34;AAAAAACgcEAAAADAHo1wQAAAAIDCuXBAAAAAQOHycEAAAABAM+NwQAAAAGC4BnFAAAAAoHA1cUAAAACgR2FxQAAAAOB6QHFAAAAAYLgqcUAAAABA4SZxQAAAAIA9InFAAAAAgOvJcEAAAABA4eJwQAAAAEAK43BAAAAAgMJ1cEAAAACgRx1wQAAAAGCPNnBAAAAAoHAtcEAAAACgRylwQAAAAKBwPXBAAAAAoHDVb0AAAACgcA1wQAAAAKCZCXBAAAAAwB6FcEAAAAAAACBwQAAAAEAKP3BAAAAAIK5vcEAAAACAPXZwQAAAAMD1kHBAAAAAACmAcEAAAADAHqFwQAAAAAAAzHBAAAAAgOvdcEAAAAAghbtwQAAAAIDCmXBAAAAAoJmVcEAAAADgelRwQAAAAKCZTXBAAAAA4KOEcEAAAAAAAJhwQAAAAEDhhnBAAAAAgMJhcEAAAAAAKWxwQAAAAMDMMHBAAAAAYGZScEAAAACAwqFwQAAAAGBmknBAAAAAoHCxcEAAAAAgheNwQAAAAKBH+XBAAAAAgMIFcUAAAADgeuBwQAAAAIDC8XBA&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[54]}},&#34;selected&#34;:{&#34;id&#34;:&#34;1051&#34;,&#34;type&#34;:&#34;Selection&#34;},&#34;selection_policy&#34;:{&#34;id&#34;:&#34;1052&#34;,&#34;type&#34;:&#34;UnionRenderers&#34;}},&#34;id&#34;:&#34;1031&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;},{&#34;attributes&#34;:{&#34;source&#34;:{&#34;id&#34;:&#34;1031&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;}},&#34;id&#34;:&#34;1035&#34;,&#34;type&#34;:&#34;CDSView&#34;},{&#34;attributes&#34;:{&#34;days&#34;:[1,15]},&#34;id&#34;:&#34;1063&#34;,&#34;type&#34;:&#34;DaysTicker&#34;},{&#34;attributes&#34;:{&#34;formatter&#34;:{&#34;id&#34;:&#34;1050&#34;,&#34;type&#34;:&#34;DatetimeTickFormatter&#34;},&#34;ticker&#34;:{&#34;id&#34;:&#34;1013&#34;,&#34;type&#34;:&#34;DatetimeTicker&#34;}},&#34;id&#34;:&#34;1012&#34;,&#34;type&#34;:&#34;DatetimeAxis&#34;},{&#34;attributes&#34;:{&#34;months&#34;:[0,1,2,3,4,5,6,7,8,9,10,11]},&#34;id&#34;:&#34;1064&#34;,&#34;type&#34;:&#34;MonthsTicker&#34;},{&#34;attributes&#34;:{&#34;text&#34;:&#34;SPY CandleStick Chart&#34;},&#34;id&#34;:&#34;1002&#34;,&#34;type&#34;:&#34;Title&#34;},{&#34;attributes&#34;:{&#34;months&#34;:[0,2,4,6,8,10]},&#34;id&#34;:&#34;1065&#34;,&#34;type&#34;:&#34;MonthsTicker&#34;},{&#34;attributes&#34;:{&#34;callback&#34;:null},&#34;id&#34;:&#34;1006&#34;,&#34;type&#34;:&#34;DataRange1d&#34;},{&#34;attributes&#34;:{&#34;months&#34;:[0,4,8]},&#34;id&#34;:&#34;1066&#34;,&#34;type&#34;:&#34;MonthsTicker&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1008&#34;,&#34;type&#34;:&#34;LinearScale&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1048&#34;,&#34;type&#34;:&#34;BasicTickFormatter&#34;},{&#34;attributes&#34;:{&#34;dimension&#34;:1,&#34;grid_line_alpha&#34;:0.3,&#34;ticker&#34;:{&#34;id&#34;:&#34;1018&#34;,&#34;type&#34;:&#34;BasicTicker&#34;}},&#34;id&#34;:&#34;1021&#34;,&#34;type&#34;:&#34;Grid&#34;},{&#34;attributes&#34;:{&#34;callback&#34;:null,&#34;data&#34;:{&#34;bottom&#34;:{&#34;__ndarray__&#34;:&#34;AAAAoEfRcEAAAABACgNxQAAAAOB6DHFAAAAAoJkhcUAAAACA621xQAAAAEAz73BAAAAAgMKRcEAAAABgZnJwQAAAAOBRTHBAAAAAwPV4cEAAAACAPZpwQAAAAGBmknBAAAAAACl8cEAAAABA4Z5wQAAAAKBHtXBAAAAAQArjcEAAAACAFHpwQAAAAMD1pHBAAAAAIK6PcEAAAACA62lwQAAAAOBRoHBAAAAAYLiucEAAAABguK5wQAAAAAAA2HBAAAAA4FEAcUAAAACgmQ1xQAAAAADXA3FA&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[27]},&#34;top&#34;:{&#34;__ndarray__&#34;:&#34;AAAAwMyccEAAAAAgrrtwQAAAAGC45nBAAAAAwMwYcUAAAABAMztxQAAAAEAK73BAAAAAgBRicEAAAACA61FwQAAAAIDrLXBAAAAAAAAMcEAAAADAzJhwQAAAAOBRhHBAAAAAIIV3cEAAAAAAKZRwQAAAAAAAsHBAAAAAoEfVcEAAAABgj25wQAAAAOCjjHBAAAAAgOt9cEAAAAAAKWRwQAAAAOBRWHBAAAAAgD2ucEAAAAAAAKhwQAAAAEDhunBAAAAAoHDlcEAAAABgjwJxQAAAAIA98nBA&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[27]},&#34;x&#34;:{&#34;__ndarray__&#34;:&#34;AAAAIkAedkIAAEBTNx92QgAAwB7cH3ZCAACAhC4gdkIAAEDqgCB2QgAAgEkLJHZCAAAArPkldkIAAEDd8CZ2QgAAANqMKHZCAADAP98odkIAAIClMSl2QgAAQKLNKnZCAAAACCArdkIAAMBtcit2QgAAwAS8LHZCAACAag4tdkIAAICYoS92QgAAQP7zL3ZCAAAA+48xdkIAAIDGNDJ2QgAAQCyHMnZCAACAXX4zdkIAAEDD0DN2QgAAACkjNHZCAADAjnU0dkIAAID0xzR2QgAAQPFjNnZC&#34;,&#34;dtype&#34;:&#34;float64&#34;,&#34;shape&#34;:[27]}},&#34;selected&#34;:{&#34;id&#34;:&#34;1053&#34;,&#34;type&#34;:&#34;Selection&#34;},&#34;selection_policy&#34;:{&#34;id&#34;:&#34;1054&#34;,&#34;type&#34;:&#34;UnionRenderers&#34;}},&#34;id&#34;:&#34;1036&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;},{&#34;attributes&#34;:{&#34;months&#34;:[0,6]},&#34;id&#34;:&#34;1067&#34;,&#34;type&#34;:&#34;MonthsTicker&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1050&#34;,&#34;type&#34;:&#34;DatetimeTickFormatter&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1055&#34;,&#34;type&#34;:&#34;Selection&#34;},{&#34;attributes&#34;:{&#34;bottom&#34;:{&#34;field&#34;:&#34;bottom&#34;},&#34;fill_color&#34;:{&#34;value&#34;:&#34;#D5E1DD&#34;},&#34;top&#34;:{&#34;field&#34;:&#34;top&#34;},&#34;width&#34;:{&#34;value&#34;:43200000},&#34;x&#34;:{&#34;field&#34;:&#34;x&#34;}},&#34;id&#34;:&#34;1037&#34;,&#34;type&#34;:&#34;VBar&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1068&#34;,&#34;type&#34;:&#34;YearsTicker&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1010&#34;,&#34;type&#34;:&#34;LinearScale&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1051&#34;,&#34;type&#34;:&#34;Selection&#34;},{&#34;attributes&#34;:{&#34;bottom&#34;:{&#34;field&#34;:&#34;bottom&#34;},&#34;fill_alpha&#34;:{&#34;value&#34;:0.1},&#34;fill_color&#34;:{&#34;value&#34;:&#34;#1f77b4&#34;},&#34;line_alpha&#34;:{&#34;value&#34;:0.1},&#34;line_color&#34;:{&#34;value&#34;:&#34;#1f77b4&#34;},&#34;top&#34;:{&#34;field&#34;:&#34;top&#34;},&#34;width&#34;:{&#34;value&#34;:43200000},&#34;x&#34;:{&#34;field&#34;:&#34;x&#34;}},&#34;id&#34;:&#34;1038&#34;,&#34;type&#34;:&#34;VBar&#34;},{&#34;attributes&#34;:{&#34;bottom_units&#34;:&#34;screen&#34;,&#34;fill_alpha&#34;:{&#34;value&#34;:0.5},&#34;fill_color&#34;:{&#34;value&#34;:&#34;lightgrey&#34;},&#34;left_units&#34;:&#34;screen&#34;,&#34;level&#34;:&#34;overlay&#34;,&#34;line_alpha&#34;:{&#34;value&#34;:1.0},&#34;line_color&#34;:{&#34;value&#34;:&#34;black&#34;},&#34;line_dash&#34;:[4,4],&#34;line_width&#34;:{&#34;value&#34;:2},&#34;render_mode&#34;:&#34;css&#34;,&#34;right_units&#34;:&#34;screen&#34;,&#34;top_units&#34;:&#34;screen&#34;},&#34;id&#34;:&#34;1069&#34;,&#34;type&#34;:&#34;BoxAnnotation&#34;},{&#34;attributes&#34;:{&#34;num_minor_ticks&#34;:5,&#34;tickers&#34;:[{&#34;id&#34;:&#34;1057&#34;,&#34;type&#34;:&#34;AdaptiveTicker&#34;},{&#34;id&#34;:&#34;1058&#34;,&#34;type&#34;:&#34;AdaptiveTicker&#34;},{&#34;id&#34;:&#34;1059&#34;,&#34;type&#34;:&#34;AdaptiveTicker&#34;},{&#34;id&#34;:&#34;1060&#34;,&#34;type&#34;:&#34;DaysTicker&#34;},{&#34;id&#34;:&#34;1061&#34;,&#34;type&#34;:&#34;DaysTicker&#34;},{&#34;id&#34;:&#34;1062&#34;,&#34;type&#34;:&#34;DaysTicker&#34;},{&#34;id&#34;:&#34;1063&#34;,&#34;type&#34;:&#34;DaysTicker&#34;},{&#34;id&#34;:&#34;1064&#34;,&#34;type&#34;:&#34;MonthsTicker&#34;},{&#34;id&#34;:&#34;1065&#34;,&#34;type&#34;:&#34;MonthsTicker&#34;},{&#34;id&#34;:&#34;1066&#34;,&#34;type&#34;:&#34;MonthsTicker&#34;},{&#34;id&#34;:&#34;1067&#34;,&#34;type&#34;:&#34;MonthsTicker&#34;},{&#34;id&#34;:&#34;1068&#34;,&#34;type&#34;:&#34;YearsTicker&#34;}]},&#34;id&#34;:&#34;1013&#34;,&#34;type&#34;:&#34;DatetimeTicker&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1052&#34;,&#34;type&#34;:&#34;UnionRenderers&#34;},{&#34;attributes&#34;:{&#34;data_source&#34;:{&#34;id&#34;:&#34;1036&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;},&#34;glyph&#34;:{&#34;id&#34;:&#34;1037&#34;,&#34;type&#34;:&#34;VBar&#34;},&#34;hover_glyph&#34;:null,&#34;muted_glyph&#34;:null,&#34;nonselection_glyph&#34;:{&#34;id&#34;:&#34;1038&#34;,&#34;type&#34;:&#34;VBar&#34;},&#34;selection_glyph&#34;:null,&#34;view&#34;:{&#34;id&#34;:&#34;1040&#34;,&#34;type&#34;:&#34;CDSView&#34;}},&#34;id&#34;:&#34;1039&#34;,&#34;type&#34;:&#34;GlyphRenderer&#34;},{&#34;attributes&#34;:{&#34;grid_line_alpha&#34;:0.3,&#34;ticker&#34;:{&#34;id&#34;:&#34;1013&#34;,&#34;type&#34;:&#34;DatetimeTicker&#34;}},&#34;id&#34;:&#34;1016&#34;,&#34;type&#34;:&#34;Grid&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1022&#34;,&#34;type&#34;:&#34;PanTool&#34;},{&#34;attributes&#34;:{&#34;below&#34;:[{&#34;id&#34;:&#34;1012&#34;,&#34;type&#34;:&#34;DatetimeAxis&#34;}],&#34;center&#34;:[{&#34;id&#34;:&#34;1016&#34;,&#34;type&#34;:&#34;Grid&#34;},{&#34;id&#34;:&#34;1021&#34;,&#34;type&#34;:&#34;Grid&#34;}],&#34;left&#34;:[{&#34;id&#34;:&#34;1017&#34;,&#34;type&#34;:&#34;LinearAxis&#34;}],&#34;plot_width&#34;:1000,&#34;renderers&#34;:[{&#34;id&#34;:&#34;1034&#34;,&#34;type&#34;:&#34;GlyphRenderer&#34;},{&#34;id&#34;:&#34;1039&#34;,&#34;type&#34;:&#34;GlyphRenderer&#34;},{&#34;id&#34;:&#34;1044&#34;,&#34;type&#34;:&#34;GlyphRenderer&#34;}],&#34;title&#34;:{&#34;id&#34;:&#34;1002&#34;,&#34;type&#34;:&#34;Title&#34;},&#34;toolbar&#34;:{&#34;id&#34;:&#34;1026&#34;,&#34;type&#34;:&#34;Toolbar&#34;},&#34;x_range&#34;:{&#34;id&#34;:&#34;1004&#34;,&#34;type&#34;:&#34;DataRange1d&#34;},&#34;x_scale&#34;:{&#34;id&#34;:&#34;1008&#34;,&#34;type&#34;:&#34;LinearScale&#34;},&#34;y_range&#34;:{&#34;id&#34;:&#34;1006&#34;,&#34;type&#34;:&#34;DataRange1d&#34;},&#34;y_scale&#34;:{&#34;id&#34;:&#34;1010&#34;,&#34;type&#34;:&#34;LinearScale&#34;}},&#34;id&#34;:&#34;1001&#34;,&#34;subtype&#34;:&#34;Figure&#34;,&#34;type&#34;:&#34;Plot&#34;},{&#34;attributes&#34;:{&#34;source&#34;:{&#34;id&#34;:&#34;1036&#34;,&#34;type&#34;:&#34;ColumnDataSource&#34;}},&#34;id&#34;:&#34;1040&#34;,&#34;type&#34;:&#34;CDSView&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1053&#34;,&#34;type&#34;:&#34;Selection&#34;},{&#34;attributes&#34;:{&#34;formatter&#34;:{&#34;id&#34;:&#34;1048&#34;,&#34;type&#34;:&#34;BasicTickFormatter&#34;},&#34;ticker&#34;:{&#34;id&#34;:&#34;1018&#34;,&#34;type&#34;:&#34;BasicTicker&#34;}},&#34;id&#34;:&#34;1017&#34;,&#34;type&#34;:&#34;LinearAxis&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1054&#34;,&#34;type&#34;:&#34;UnionRenderers&#34;},{&#34;attributes&#34;:{},&#34;id&#34;:&#34;1018&#34;,&#34;type&#34;:&#34;BasicTicker&#34;}],&#34;root_ids&#34;:[&#34;1001&#34;]},&#34;title&#34;:&#34;Bokeh Application&#34;,&#34;version&#34;:&#34;1.2.0&#34;}}(function() {var fn = function() {Bokeh.safely(function() {(function(root) {function embed_document(root) {var docs_json = document.getElementById(&#39;1262&#39;).textContent;var render_items = [{&#34;docid&#34;:&#34;f362fc6b-64a3-4985-bd11-a6eca8c0afdd&#34;,&#34;roots&#34;:{&#34;1001&#34;:&#34;21623f9a-4633-477d-9b37-84961775a2da&#34;}}];root.Bokeh.embed.embed_items(docs_json, render_items);}if (root.Bokeh !== undefined) {embed_document(root);} else {var attempts = 0;var timer = setInterval(function(root) {if (root.Bokeh !== undefined) {embed_document(root);clearInterval(timer);}attempts++;if (attempts  100) {console.</description>
    </item>
    
  </channel>
</rss>