<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Long Short Strategies</title>
    <link>/post/</link>
    <description>Recent content in Posts on Long Short Strategies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to calculate IRR in Python</title>
      <link>/post/2018-03-20-irr-py/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-20-irr-py/</guid>
      <description>Calculating IRR in PythonCalculation of IRR in Python is easy with the numpy module.
Why do we need to calculate the IRR or Internal rate of returns?
Let us suppose a manager has an opportunity to invest in two projects, but can only choose one project. The projects are:
Project 1 requires $800 million in investment today, but it will pay 200,250,300,350,400 million in payments each year for the next 5 years.</description>
    </item>
    
    <item>
      <title>How to calculate IRR in R</title>
      <link>/post/2018-03-20-irr/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-20-irr/</guid>
      <description>Calculating IRR in RCalculation of IRR in R is easy with the package called jrvFinance. You can install this package with the command install.packages(&#34;jrvFinance&#34;).
Why do we need to calculate the IRR or Internal rate of returns?
Let us suppose a manager has an opportunity to invest in two projects, but can only choose one project. The projects are:
Project 1 requires $800 million in investment today, but it will pay 200,250,300,350,400 million in payments each year for the next 5 years.</description>
    </item>
    
    <item>
      <title>Time Value of Money in Python</title>
      <link>/post/2018-03-19-tvm_py/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-19-tvm_py/</guid>
      <description>In this article we will perform the same time value of money calculations using Python. First let us import the necessary modules/libraries.
import pandas as pdimport numpy as npimport matplotlib.pyplot as pltCreating a pandas dataframe.
# Setting interest rate to 5%r = 0.05cf = pd.DataFrame({&amp;#39;Year&amp;#39;:[1,2,3,4,5], &amp;quot;cash_flow&amp;quot;:[100,100,100,100,100]})cf[&amp;quot;pv&amp;quot;] = cf[&amp;#39;cash_flow&amp;#39;] / (1.0 + r)**cf[&amp;#39;Year&amp;#39;]npv = cf[&amp;quot;pv&amp;quot;].sum()print(cf)## Year cash_flow pv## 0 1 100 95.</description>
    </item>
    
    <item>
      <title>Time Value of Money in R</title>
      <link>/post/2018-03-18-tvm/</link>
      <pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-03-18-tvm/</guid>
      <description>In this article we will perform basic financial calculations in R.
Calculating the Net Present Value (NPV)Financial problems such as valuing an asset can be solved by calculating its net present value. The underlying principle in the calculation is that a dollar today is worth more than a dollar a year from now. This principle was well known to our ancestors thousands of year ago.</description>
    </item>
    
  </channel>
</rss>